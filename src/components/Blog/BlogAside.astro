---
import type { CollectionEntry } from "astro:content";
import type { MarkdownHeading } from "astro";

import { Icon } from "astro-icon/components";

import BlogAsideHeadings from "./BlogAsideHeadings.astro";
import BlogAsideSeriesItem from "./BlogAsideSeriesItem.astro";

export interface Props {
    headings: MarkdownHeading[];
    series?: CollectionEntry<"blog-series">;
    currentPost: string;
}

const { series, headings, currentPost } = Astro.props;
---

<style>
    .content-overview {
        @apply sticky;
        height: min-content;
    }
</style>

<button
    id="mobile-toc-open"
    class="fixed z-40 bottom-3 shadow-xl right-6 p-6 rounded-full bg-slate-300 dark:bg-slate-800 md:hidden"
>
    <Icon name="fa-solid:bars" title="Open mobile menu" aria-hidden={true} />
    <span class="sr-only">Open mobile menu</span>
</button>

<div
    id="table-of-contents"
    class="hidden fixed z-50 rounded-2xl bottom-3 bg-slate-300 dark:bg-slate-800 md:top-4 md:bg-transparent md:dark:bg-transparent md:relative md:flex md:basis-1/4"
>
    <button
        id="mobile-toc-close"
        style="margin-right: 0.2em"
        class="fixed z-50 bottom-3 right-6 p-6 rounded-full bg-slate-300 dark:bg-slate-800 md:hidden"
    >
        <Icon
            name="fa-solid:times"
            title="Close mobile menu"
            aria-hidden={true}
        />
        <span class="sr-only">Close mobile menu</span>
    </button>

    <aside
        class:list={[{ "md:pl-5": series, "md:pl-2": !series }]}
        class="unset p-3 pb-14 md:p-0 md:top-5 content-overview"
    >
        <ul class="unset list-none">
            {
                series &&
                    series.data.posts.map((sp) => (
                        <BlogAsideSeriesItem
                            isCurrent={sp.post.slug === currentPost}
                            url={`/blog/${sp.post.slug}`}
                            label={sp.label}
                        >
                            <BlogAsideHeadings
                                headings={headings}
                                title={sp.label}
                                indentTitle={false}
                            />
                        </BlogAsideSeriesItem>
                    ))
            }
            {
                !series && (
                    <BlogAsideHeadings
                        headings={headings}
                        title="Auf dieser Seite:"
                    />
                )
            }
        </ul>
    </aside>
</div>

<script>
    // @ts-nocheck
    const menuElem = document.querySelector("#table-of-contents");

    const closeMenu = () => {
        menuElem?.classList.add("hidden");
    };
    const openMenu = () => {
        menuElem?.classList.remove("hidden");
    };
    const recalcTocWidth = () => {
        if (window.matchMedia("(max-width: 767px)").matches) {
            menuElem?.setAttribute(
                "style",
                `width: ${window.getComputedStyle(menuElem?.parentElement).getPropertyValue("width")}`,
            );
        }
    };

    // make sure menu is closed when navigating on current page
    menuElem?.querySelectorAll("a.text-sm").forEach((el) => {
        el.addEventListener("click", () => {
            closeMenu();
        });
    });

    // close menu when clicking outside
    window.addEventListener("click", (e) => {
        let target = e.target,
            insideMenu = false;
        while (!insideMenu) {
            if (target === null) {
                closeMenu();
                return false;
            }
            if (
                target.id !== "table-of-contents" &&
                target.id !== "mobile-toc-open"
            ) {
                target = target.parentNode;
            } else {
                insideMenu = true;
            }
        }
        return !insideMenu;
    });

    // register toggle events
    document.querySelector("#mobile-toc-open").addEventListener("click", () => {
        openMenu();
        recalcTocWidth();
    });
    document
        .querySelector("#mobile-toc-close")
        .addEventListener("click", () => {
            closeMenu();
        });

    // recalculate width of menu on resize/load (fixed is not relative to parent but viewport)
    window.addEventListener("resize", () => recalcTocWidth());
    window.addEventListener("load", () => recalcTocWidth());
</script>
